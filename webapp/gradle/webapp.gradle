import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "application"
apply plugin: "com.moowork.node"

def MAIN_CLASS = "org.apereo.cas.web.CasWebApplication"

description = "Apereo CAS Web Application"
mainClassName = MAIN_CLASS

node {
    version = "${nodeVersion}"
    nodeModulesDir = project(":webapp").projectDir
    download = true
}

if (!Boolean.getBoolean("skipNpmCache")) {
    npm_install.dependsOn(npm_cache_clean)
}

task npmLint(type: NpmTask) {
    dependsOn npm_install
    description "Lint the JavaScript files"
    group "UI"
    args = ['run', 'lint', '--silent']
}

task compileSass(type: NpmTask) {
    group 'UI'
    dependsOn npm_install
    description "Compile Sass"
    args = ['run', 'gulp', '--silent']
}

if (!rootProject.publishingRelease && !Boolean.getBoolean("skipNpmLint")) {
    processResources.dependsOn npmLint
}

if (!Boolean.getBoolean("skipSass")) {
    processResources.dependsOn compileSass
}

clean.delete << new File(project(":webapp").projectDir, "node_modules")
clean.delete << fileTree(dir: project(":webapp").projectDir.getPath() + '/resources/static/js' , include: '*-bundle.js')

sourceSets {
    main {
        resources {
            srcDirs "${project.buildDir}/generated-src/main/resources", "${project.projectDir}/../resources"
        }
    }
}

javadoc {
    enabled false
}

[distZip, distTar].each { task -> configurations.archives.artifacts.removeAll
        { it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task }
    task.enabled = false
}

springBoot  {
    mainClass = MAIN_CLASS
}

bootRepackage {
    mainClass = MAIN_CLASS
    enabled = !rootProject.publishingRelease
}

bootRun {

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn pathingJar
        doFirst {
          classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }

    addResources = true
    systemProperties = System.properties

    def list = []
    if (rootProject.enableRemoteDebugging) {
        list.add("-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n")
    }
    
    jvmArgs = list
}

war {
    def currentTime = java.time.ZonedDateTime.now()

    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Vendor": project.group,
                "Created-By": project.group,
                "Implementation-Date": currentTime,
                "Specification-Version": rootProject.currentRevision,
                "Implementation-Version": project.version)
    }
    from "${project.buildDir}/generated-src/main/resources", { into "WEB-INF/classes" }
    enabled = !rootProject.publishingRelease && !rootProject.publishSnapshots
}

dependencies {
    implementation project(":core:cas-server-core")
    implementation project(":core:cas-server-core-monitor")
    implementation project(":core:cas-server-core-authentication")
    implementation project(":core:cas-server-core-services")
    implementation project(":core:cas-server-core-logout")
    implementation project(":core:cas-server-core-audit")
    implementation project(":core:cas-server-core-logging")
    implementation project(":core:cas-server-core-tickets")
    implementation project(":core:cas-server-core-web")
    implementation project(":core:cas-server-core-validation")
    implementation project(":core:cas-server-core-util")
    implementation project(":core:cas-server-core-events")
    implementation project(":core:cas-server-core-events-configuration")
    implementation project(":core:cas-server-core-configuration")
    implementation project(":core:cas-server-core-configuration-metadata-repository")

    implementation project(":support:cas-server-support-throttle")
    implementation project(":support:cas-server-support-person-directory")
    implementation project(":support:cas-server-support-configuration")
    implementation project(":support:cas-server-support-geolocation")
    implementation project(":support:cas-server-support-actions")
    implementation project(":support:cas-server-support-cookie")
    implementation project(":support:cas-server-support-reports")
    implementation project(":support:cas-server-support-themes")
    implementation project(":support:cas-server-support-validation")
    implementation project(":support:cas-server-support-pm-webflow")

    implementation project(":webapp:cas-server-webapp-config")
    implementation project(":webapp:cas-server-webapp-init")

    implementation libraries.pac4j
    implementation libraries.thymeleaf
    implementation libraries.groovy
    implementation libraries.cassecurityfilter
    implementation libraries.metrics
    implementation libraries.bouncycastle
    runtime libraries.webjars
    implementation libraries.springcloudconfigclient
}
